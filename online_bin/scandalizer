#!/bin/bash
#set -u 

function print_the_help {
  echo "USAGE: $0 -r <run_number> -n <num> "
  echo "  OPTIONS: "
  echo "            -r,--run           Required run number"
  echo "            -n,--n-events      Required number of eventsrun number"
  echo "            -c,--container     Run using singularity container "
  echo "            -C,--calibrate     Replay N-calibrate events and run calibrations before full replay"
  echo "            --N-calibrate      Number of events to replay for calibration (Default: 50000)"
  #echo "            -o,--online-only   Log online only"
  #echo "            -a,--all           Log all plots (online, detectors, physics)"
  #echo "            -n,--no-log        Do not submit any log entries"
  #echo "            -y,--yes           Automatically submit log entries (does not prompt for y/n)"
  exit 
}

function yes_or_no {
  while true; do
    read -p "$* [y/n]: " yn
    case $yn in
      [Yy]*) return 0 ;;
      [Nn]*) echo "No entered" ; return 1 ;;
    esac
  done
}

run_number=
n_events=
container=
n_calib=
calibrate=

if [[ $# -eq 0 ]] ; then
  print_the_help
  exit 
fi

POSITIONAL=()
while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -h|--help)
      shift # past argument
      print_the_help
      ;;
    -r|--run)
      run_number="$2"
      shift # past argument
      shift # past value
      ;;
    -n|--n-events)
      n_events="$2"
      shift # past argument
      shift # past value
      ;;
    -c|--container)
      container=1
      #shift # past argument
      shift # past value
      ;;
    -C|--calibrate)
      calibrate=1
      #shift # past argument
      shift # past value
      ;;
    --n-calibrate)
      n_calib="$2"
      shift # past argument
      shift # past value
      ;;
    #-a|--all)
    #  LOG_ALL_PLOTS=1
    #  shift # past argument
    #  #shift # past value
    #  ;;
    #-o|--online-only)
    #  ONLINE_ONLY=1
    #  shift # past argument
    #  #shift # past value
    #  ;;
    *)    # unknown option
      #POSITIONAL+=("$1") # save it in an array for later
      echo "unknown option"
      print_the_help
      shift # past argument
      ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ -z ${n_events} ]] ; then
  echo  " need argument -n <num> "
  print_the_help
fi
if [[ -z ${run_number} ]] ; then
  echo  " need argument -r <run> "
  print_the_help
fi
#if [[ $# -eq 0 ]] ; then
#  exit 
#fi


# For some reason the module files need to put in a specific order.
# This is probably because we are using the old TCL version.
module unload csv/dev
module load csv/dev
module load tmux/latest
module load python/latest
module load python/2.7.15
module load python3/latest
module load vim/latest
module load git/latest
module load ruby/2.5.3

mkdir -p results/${run_number}

PREVIOUS_Scan=$(pgrep -a "hcana" | grep online_monitor | awk '{print $1}')
echo ${PREVIOUS_Scan}
if [ -n "${PREVIOUS_Scan}" ] ; then
  echo "killing ${PREVIOUS_Scan}"
  kill ${PREVIOUS_Scan}
fi

hcana  -b -q "online_monitor/scandalizer_monitor.cxx(${run_number},${n_events})"


